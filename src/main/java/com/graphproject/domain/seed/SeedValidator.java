package com.graphproject.domain.seed;

import com.graphproject.core.geom.Circle2;
import com.graphproject.domain.graph.*;

import java.awt.Dimension;
import java.awt.Point;
import java.awt.Toolkit;
import java.util.*;

/**
 * 
 * @author Thiago Feij√≥ de Albuquerque
 */

/**
 * Validates a seed for vertex layout generation in a graph.
 * Ensures that generated positions do not overlap or interfere with edges.
 * 
 * <p>This class ensures that vertex positions generated using a seed:
 * <ul>
 *   <li>Maintain minimum distance from other vertices</li>
 *   <li>Do not intersect unrelated edges</li>
 * </ul>
 * 
 * If the initial seed is invalid, it keeps generating new seeds until
 * a valid one is found.
 */
public class SeedValidator {

    /* ===== ATTRIBUTES ===== */

    /** The seed used to generate the graph layout */
    private long seed;

    /** The list of vertices from the graph */
    private List<Vertex> vertices;

    /** The list of edges from the graph */
    private List<Edge> edges;

    /** Number of attempts taken to generate a valid seed */
    private int tries = 0;

    /** Screen size (used for layout bounds) */
    private Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

    /* ===== STATIC ATTRIBUTES ===== */

    /** Singleton instance of SeedGenerator */
    private static final SeedGenerator instance = SeedGenerator.getInstance();

    /* ===== CONSTRUCTORS ===== */

    /**
     * Constructs a SeedValidator and attempts to validate or regenerate
     * a valid seed for vertex positioning.
     * 
     * @param g The graph whose layout will be validated
     */
    public SeedValidator(Graph g) {
        this.seed = instance.getSeed();
        this.vertices = g.getVertices();
        this.edges = g.getEdges();

        if (!validate(seed, g)) {
            do {
                instance.generateSeed();
                seed = instance.getSeed();
                tries++;
            } while (!validate(seed, g));
        }
    }

    /* ===== METHODS ===== */

    /**
     * Validates whether the layout generated by a given seed is acceptable.
     * Ensures that:
     * <ul>
     *   <li>No two vertices are too close to each other</li>
     *   <li>No vertex intersects an unrelated edge</li>
     * </ul>
     * 
     * @param seed The seed to validate
     * @param g    The graph providing calculation methods
     * @return true if the layout is valid, false otherwise
     */
    private boolean validate(long seed, Graph g) {
        generateRandomPositions(seed, g.getVertices());
        boolean validSeed = true;

        // Validate vertex-to-vertex distance
        for (Vertex u : vertices) {
            for (Vertex v : vertices) {
                if (u != v) {
                    double distance = g.distanceBetweenPoints(u.getCoordinates(), v.getCoordinates());
                    if (distance <= 4 * Circle2.getRadius()) {
                        validSeed = false;
                        break;
                    }
                }
            }
            if (!validSeed) break;
        }

        // Validate vertex-to-edge distance (only if vertex-vertex validation passed)
        if (validSeed) {
            for (Vertex w : vertices) {
                Point wCoordinates = new Point(w.getCoordinates());

                for (Edge e : edges) {
                    Vertex u = vertices.get(e.getFrom());
                    Vertex v = vertices.get(e.getTo());

                    if (w != u && w != v) {
                        double distance = g.distanceBetweenPointLine(
                            u.getCoordinates(),
                            v.getCoordinates(),
                            wCoordinates
                        );

                        if (distance <= 4 * Circle2.getRadius()) {
                            validSeed = false;
                            break;
                        }
                    }
                }
                if (!validSeed) break;
            }
        }

        return validSeed;
    }

    /**
     * Generates random positions for all vertices using the given seed.
     * Ensures vertices stay within screen bounds (with padding).
     * 
     * @param seed     The seed to initialize the random generator
     * @param vertices List of vertices to assign coordinates to
     */
    private void generateRandomPositions(long seed, List<Vertex> vertices) {
        Random rand = new Random(seed);
        int width = screenSize.width;
        int height = screenSize.height;

        for (Vertex v : vertices) {
            int x = 100 + rand.nextInt(width - 200);
            int y = 100 + rand.nextInt(height - 200);
            v.setCoordinates(new Point(x, y));
        }
    }

    /* ===== GETTERS ===== */

    /**
     * Returns the screen size used for layout generation.
     * 
     * @return Screen size as a Dimension object
     */
    public Dimension getScreenSize() {
        return screenSize;
    }

    /**
     * Returns the valid seed used for vertex layout.
     * 
     * @return The validated seed
     */
    public long getSeed() {
        return seed;
    }

    /**
     * Returns the number of seed attempts before finding a valid one.
     * 
     * @return Number of seed retries
     */
    public int getTries() {
        return tries;
    }

} // SeedValidator
